{"version":3,"sources":["serviceWorker.ts","Signin/Picture.tsx","Signin/index.tsx","index.tsx"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Picture","props","className","srcSet","src","type","alt","Signin","signIn","tryAnonymously","blockstack","href","onClick","moment","language","Dashboard","React","lazy","App","anonymous","userSession","appConfig","this","isUserSignedIn","fallback","signOut","signUserOut","redirectURI","redirectToSignIn","setState","AppConfig","UserSession","manifestPath","redirectPath","manifestURI","isSignInPending","handlePendingSignIn","Component","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a30e5432.chunk.js","sourcesContent":["/* eslint-disable */\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\ninterface Props {\n  className?: string;\n  src: string;\n}\n\nexport default function Picture(props: Props) {\n  return (\n    <picture className={props.className}>\n      <source srcSet={`${props.src}.webp`} type='image/webp' />\n      <source srcSet={`${props.src}.png`} type='image/png' />\n      <img src={`${props.src}.png`} alt='' />\n    </picture>\n  );\n}\n","import React from 'react';\nimport {CloudOff, Key} from 'react-feather';\n\nimport './index.scss';\nimport Picture from './Picture';\n\ninterface Props {\n  signIn: () => void;\n  tryAnonymously: () => void;\n}\n\nexport default function Signin(props: Props) {\n  const {signIn, tryAnonymously} = props;\n  const blockstack = <a href='https://blockstack.org/'>Blockstack</a>;\n  const tryBlockstack = 'https://blockstack.org/try-blockstack';\n\n  return (\n    <div className='signin'>\n      <div className='signin-inner'>\n        <h1>Caster is a encrypted, decentralised, syncing podcast player</h1>\n        <p>(That&apos;s a mouthful)</p>\n        <div className='intro'>\n          <Picture className='intro-image' src='mobile_30_08_2019' />\n          <div className='intro-text'>\n            <h2>Here&apos;s how it works:</h2>\n            <p>You can try out Caster by clicking the button below. In order to sync podcasts though, you&apos;ll need a {blockstack} identity. Making one is the same as signing up for any other online account, a process you&apos;ve probably done hundreds of times.</p>\n            <p>This will provide you with a <a href={tryBlockstack}>universal login</a> which you can use to access any Blockstack app. You&apos;ll also get a private encryption key, which is used to encrypt infomation about your podcast feeds.</p>\n            <button onClick={signIn} type='button'>\n              <Key />Create ID/Log In\n            </button>\n            <button onClick={tryAnonymously} type='button'>\n              <CloudOff />Try without making an ID\n            </button>\n          </div>\n        </div>\n\n      </div>\n    </div>\n  );\n}\n","// import {AppConfig, UserSession} from 'blockstack';\nimport * as moment from 'moment';\nimport 'moment/min/locales';\nimport React, {Component, Suspense} from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\nimport Signin from './Signin';\n\n// type definitions for js modules\nimport './podcast-feed-parser.d.ts';\nimport './react-scale-text.d.ts';\nimport './react-textfit.d.ts';\n// css\nimport 'typeface-montserrat';\nimport './styling/basic.scss';\n\n// todo: testing\n\n// set locale\nmoment.locale(window.navigator.language);\n// Lazy load the dashboard\nconst Dashboard = React.lazy(() => import('./Dashboard'));\n\ninterface State {\n  anonymous: boolean;\n  // Should use UserSession | null and AppConfig | null but I can't import the types (I think)\n  userSession: any;\n  appConfig: any;\n}\n\nclass App extends Component<{}, State> {\n  constructor(props: {}) {\n    super(props);\n\n    this.state = {\n      anonymous: false,\n      userSession: null,\n      appConfig: null\n    };\n  }\n\n  render() {\n    const {userSession, anonymous, appConfig} = this.state;\n\n    const signedIn = userSession && userSession.isUserSignedIn();\n\n    if (signedIn || anonymous) {\n      return (\n        <Suspense fallback={<></>}>\n          <Dashboard\n            userSession={userSession}\n            signOut={() => userSession.signUserOut(appConfig.redirectURI())}\n          />\n        </Suspense>\n      );\n    }\n    return (\n      <Signin\n        signIn={() => userSession.redirectToSignIn()}\n        tryAnonymously={() => this.setState({anonymous: true})}\n      />\n    );\n  }\n\n  componentDidMount() {\n    // Dynamically import blockstack\n    import('blockstack')\n      .then(({AppConfig, UserSession}) => {\n        const appConfig = new AppConfig();\n\n        if (process.env.NODE_ENV === 'production') {\n          appConfig.manifestPath = '/caster/manifest.json';\n          appConfig.redirectPath = '/caster';\n        }\n\n        console.log(`Manifest path: ${appConfig.manifestURI()}`);\n        console.log(`Redirect path: ${appConfig.redirectURI()}`);\n\n        const userSession = new UserSession({appConfig});\n\n        if (userSession.isSignInPending()) {\n          userSession.handlePendingSignIn().then(() => {\n            // There is probably a better way of thing this\n            window.location.href = appConfig.redirectURI();\n          });\n        }\n\n        this.setState({userSession, appConfig});\n      });\n  }\n}\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// Done :^)\nserviceWorker.register();\n"],"sourceRoot":""}